// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: receivables.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createReceivable = `-- name: CreateReceivable :one
INSERT INTO receivables (id, created_at, updated_at, userid, date, amount_total, amount_received, amount_left, status)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, created_at, updated_at, userid, date, amount_total, amount_received, amount_left, status
`

type CreateReceivableParams struct {
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Userid         uuid.UUID
	Date           time.Time
	AmountTotal    float64
	AmountReceived float64
	AmountLeft     float64
	Status         string
}

func (q *Queries) CreateReceivable(ctx context.Context, arg CreateReceivableParams) (Receivable, error) {
	row := q.db.QueryRowContext(ctx, createReceivable,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Userid,
		arg.Date,
		arg.AmountTotal,
		arg.AmountReceived,
		arg.AmountLeft,
		arg.Status,
	)
	var i Receivable
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Userid,
		&i.Date,
		&i.AmountTotal,
		&i.AmountReceived,
		&i.AmountLeft,
		&i.Status,
	)
	return i, err
}

const deleteReceivable = `-- name: DeleteReceivable :one
DELETE FROM receivables WHERE id=$1
RETURNING id, created_at, updated_at, userid, date, amount_total, amount_received, amount_left, status
`

func (q *Queries) DeleteReceivable(ctx context.Context, id uuid.UUID) (Receivable, error) {
	row := q.db.QueryRowContext(ctx, deleteReceivable, id)
	var i Receivable
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Userid,
		&i.Date,
		&i.AmountTotal,
		&i.AmountReceived,
		&i.AmountLeft,
		&i.Status,
	)
	return i, err
}

const getAllReceivables = `-- name: GetAllReceivables :many
SELECT r.id, r.created_at, r.updated_at, r.userid, r.date, r.amount_total, r.amount_received, r.amount_left, r.status, u.name AS username FROM receivables r
    JOIN users u ON r.userid = u.id
`

type GetAllReceivablesRow struct {
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Userid         uuid.UUID
	Date           time.Time
	AmountTotal    float64
	AmountReceived float64
	AmountLeft     float64
	Status         string
	Username       string
}

func (q *Queries) GetAllReceivables(ctx context.Context) ([]GetAllReceivablesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllReceivables)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllReceivablesRow
	for rows.Next() {
		var i GetAllReceivablesRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Userid,
			&i.Date,
			&i.AmountTotal,
			&i.AmountReceived,
			&i.AmountLeft,
			&i.Status,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReceivableByID = `-- name: GetReceivableByID :one
SELECT r.id, r.created_at, r.updated_at, r.userid, r.date, r.amount_total, r.amount_received, r.amount_left, r.status, u.name AS username FROM receivables r
           JOIN users u ON r.userid = u.id
           WHERE r.id = $1
`

type GetReceivableByIDRow struct {
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Userid         uuid.UUID
	Date           time.Time
	AmountTotal    float64
	AmountReceived float64
	AmountLeft     float64
	Status         string
	Username       string
}

func (q *Queries) GetReceivableByID(ctx context.Context, id uuid.UUID) (GetReceivableByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getReceivableByID, id)
	var i GetReceivableByIDRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Userid,
		&i.Date,
		&i.AmountTotal,
		&i.AmountReceived,
		&i.AmountLeft,
		&i.Status,
		&i.Username,
	)
	return i, err
}

const getReceivablesByUserId = `-- name: GetReceivablesByUserId :many
SELECT r.id, r.created_at, r.updated_at, r.userid, r.date, r.amount_total, r.amount_received, r.amount_left, r.status, u.name AS username FROM receivables r
           JOIN users u ON r.userid = u.id
           WHERE r.userid = $1
`

type GetReceivablesByUserIdRow struct {
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Userid         uuid.UUID
	Date           time.Time
	AmountTotal    float64
	AmountReceived float64
	AmountLeft     float64
	Status         string
	Username       string
}

func (q *Queries) GetReceivablesByUserId(ctx context.Context, userid uuid.UUID) ([]GetReceivablesByUserIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getReceivablesByUserId, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReceivablesByUserIdRow
	for rows.Next() {
		var i GetReceivablesByUserIdRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Userid,
			&i.Date,
			&i.AmountTotal,
			&i.AmountReceived,
			&i.AmountLeft,
			&i.Status,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReceivable = `-- name: UpdateReceivable :one
UPDATE receivables
SET
    date=$2,
    updated_at = NOW(),
    amount_total = $3,
    amount_received = $4,
    amount_left = $5,
    status = $6
WHERE id=$1
RETURNING id, created_at, updated_at, userid, date, amount_total, amount_received, amount_left, status
`

type UpdateReceivableParams struct {
	ID             uuid.UUID
	Date           time.Time
	AmountTotal    float64
	AmountReceived float64
	AmountLeft     float64
	Status         string
}

func (q *Queries) UpdateReceivable(ctx context.Context, arg UpdateReceivableParams) (Receivable, error) {
	row := q.db.QueryRowContext(ctx, updateReceivable,
		arg.ID,
		arg.Date,
		arg.AmountTotal,
		arg.AmountReceived,
		arg.AmountLeft,
		arg.Status,
	)
	var i Receivable
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Userid,
		&i.Date,
		&i.AmountTotal,
		&i.AmountReceived,
		&i.AmountLeft,
		&i.Status,
	)
	return i, err
}
